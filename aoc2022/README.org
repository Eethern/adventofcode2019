* 2022
This year is written in Rust!
- DAY 1 :: =BinaryHeap= is about the same speed as just sorting, but should scale better.
- DAY 2 :: =HashMap= to look up the answers, kind of feels like cheating since
  it hardcodes the rules of the universe.
- DAY 3 :: =HashSet= for to find common occurences in first task. =HashMap= to
  implement a counter for occurences across strings for second task.
- DAY 4 :: Bounds checking, not much to say. Originally though it
  would require checking across all combinations of pairs, not just
  within pairs.
- DAY 5 :: Regex to parse, =VecDeque= for each crate stack, and a =VecDeque=
  for part b.
- DAY 6 :: Nice use of =.windows= and =iter.position= functions
- DAY 7 :: =N-ary= tree implementation. Was a pain in rust but made it!
- DAY 8 :: Very bruteforce way, might want to use =memoization=
  here. Also probably could use =SIMD= for both tasks.
- DAY 9 :: Rope simulation with chebychev distance!
- DAY 10 :: Prepared for intcode, so made a skeleton for a CPU+display :).
- DAY 11 :: Clever use of modulo. Part b is really slow (probably because of the 10000 rounds).
- DAY 12 :: First pathfinding one, used Dijkstra's.
- DAY 13 :: Nice use of =PartialOrd= to compare packets.
- DAY 14 :: Used sparse coordinates for sand blocks. Second part is super slow so will have to find a faster method.
  
  
